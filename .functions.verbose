#!/usr/bin/env bash
# shellcheck disable=SC1090,SC2012,SC2034,SC2129,SC2154 #? cannot-follow, appears-unused

#* Clipboard shortcut
function clip() {
    echo "$@" | pbcopy
}


#* Prompt stuff

function nonzero_return() {
	RETVAL=$?
	[ $RETVAL -ne 0 ] && echo "$RETVAL"
}

# get current branch in git repo
function parse_git_branch() {
	BRANCH=`git branch 2> /dev/null | sed -e '/^[^*]/d' -e 's/* \(.*\)/\1/'`
	if [ ! "${BRANCH}" == "" ]
	then
		STAT=`parse_git_dirty`
		echo "[${BRANCH}${STAT}]"
	else
		echo ""
	fi
}

# get current status of git repo
function parse_git_dirty {
	status=`git status 2>&1 | tee`
	dirty=`echo -n "${status}" 2> /dev/null | grep "modified:" &> /dev/null; echo "$?"`
	untracked=`echo -n "${status}" 2> /dev/null | grep "Untracked files" &> /dev/null; echo "$?"`
	ahead=`echo -n "${status}" 2> /dev/null | grep "Your branch is ahead of" &> /dev/null; echo "$?"`
	newfile=`echo -n "${status}" 2> /dev/null | grep "new file:" &> /dev/null; echo "$?"`
	renamed=`echo -n "${status}" 2> /dev/null | grep "renamed:" &> /dev/null; echo "$?"`
	deleted=`echo -n "${status}" 2> /dev/null | grep "deleted:" &> /dev/null; echo "$?"`
	bits=''
	if [ "${renamed}" == "0" ]; then
		bits=">${bits}"
	fi
	if [ "${ahead}" == "0" ]; then
		bits="*${bits}"
	fi
	if [ "${newfile}" == "0" ]; then
		bits="+${bits}"
	fi
	if [ "${untracked}" == "0" ]; then
		bits="?${bits}"
	fi
	if [ "${deleted}" == "0" ]; then
		bits="x${bits}"
	fi
	if [ "${dirty}" == "0" ]; then
		bits="!${bits}"
	fi
	if [ ! "${bits}" == "" ]; then
		echo " ${bits}"
	else
		echo ""
	fi
}

# export PS1="\[\e[32m\]\\$\[\e[m\]  \[\e[33m\] ♫♪♫♪\[\e[m\]  \[\e[36m\]\w\[\e[m\]\[\e[32m\] =>  \[\e[m\]\[\e[36m\]\`parse_git_branch\`\[\e[m\] \[\e[41m\]\`nonzero_return\`\[\e[m\] \n\[\e[35m\]=>\[\e[m\] "

###############################################################################

source "$HOME/.dotfiles/.blurbs"

# function wrapper to take care of all of the mundane function tasks
# names of strings are set in the calling funciton
# TODO I'd rather use a dictionary lookup for this stuff
# args are passed through
# localized string resources are found in ~/.dotfiles/.blurbs
function version_check() {
	result=0
	echo "@ : $*"
	echo "success : test output ... 1: $1   2: $2" #! test
	if [ -z "$1" ] || [ "$1" = "-h" ]; then
		echo -e "$vc_usage"
		result=1
	elif [ "$1" = "-v" ]; then
		echo -e "$version_blurb"
		result=1
	else
		# normal operation continues ...
		result=0
	fi
	return $result
}

# TEST: use parameter expansion to clean text
# function dc() {
# 	vc_name=$0
# 	vc_version="$dc_version"
# 	vc_usage="$dc_usage"
# 	version_check "$@"
# 	if [ $? ]; then # returned non-zero
# 		echo "exit : test output ... 1: $1   2: $2" #! test
# 	else
# 		echo "success : test output ... 1: $1   2: $2" #! test
# 	fi

# 	#? are these needed? wanted?
# 	unset version
# 	unset vc_usage
# }

# List all open files containing parameter
function allopen() { sudo lsof -i -P | grep "$1"; }

# List aliases containing $1
function a() { alias | grep "$1"; }

# From: https://cfenollosa.com/misc/tricks.txt
function lt() { ls -ltrsA "$@" | tail; }


# send this to anybar: df -h | awk '/dev\/hd/ { print $6 "\t: " $5 }'
# https://github.com/skeptycal/AnyBar
# Send color code $1 to AnyBar on port {$2:-1738}
function anybar() { echo -n "$1" | nc -4u -w0 localhost "${2:-1738}"; }

function azure_agent() {
	# $1 must be a valid directory containing svc.sh to replace default
	if [ -n "${1}" ] && [ -d "${1}" ] && [ -f "${1}/svc.sh" ] ; then
		working_dir="${1}/"
	else
		working_dir="$HOME/myagent/"
	fi

	# $2 replaces [command] default 'status'
	if [ -z "${2}" ] ; then
		param="status"
	else
		param="${2}"
	fi

	# This script only seems to work from the actual working directory
	# and 'cd -' doesn't seem to work here ...
	temp_pwd=$("PWD")
	cd "$working_dir" || return
	./svc.sh "$param"
	result="$?"
	echo "result $result"
	cd "$temp_pwd" || return
	return "$result"
}

# Create (append) a log of the any program output
	# Usage: datelog [program_name]
	# 	All output sent to <program_name>_mm_dd_yy.log
	#	e.g. datelog ls -laF *.py  --- all output sent to ls_03_22_19.log
function datelog() {
	file_name="$1$(date "+%m_%d_%y").log"
	printf "\nOutput logged to file: %s\n\n""$file_name"
	printf "\n===================================" >>"$file_name"
	printf "\n= Log for %s\n\n""$(date "+%m/%d/%Y")" >>"$file_name"
	echo "$ $*" >>"$file_name"
	"$*" >>"$file_name"
}

function wrap_args() {
	#! test
	echo before "$@" after;
}

# Create a new directory and enter it
function mkd() {
	mkdir -p "$@" && cd "$_" || return
}

# Change working directory to the top-most Finder window location
function cdf() { cd "$(osascript -e 'tell app "Finder" to POSIX path of (insertion location as alias)')" || return ; }

# Create a .tar.gz archive, using `zopfli`, `pigz` or `gzip` for compression
function targz() {
	local tmpFile="${*%/}.tar"
	tar -cvf "${tmpFile}" --exclude=".DS_Store" "${@}" || return 1

	size=$(
		stat -f"%z" "${tmpFile}" 2>/dev/null # macOS `stat`
		stat -c"%s" "${tmpFile}" 2>/dev/null # GNU `stat`
	)

	local cmd=""
	if ((size < 52428800)) && hash zopfli 2>/dev/null; then
		# the .tar file is smaller than 50 MB and Zopfli is available; use it
		cmd="zopfli"
	else
		if hash pigz 2>/dev/null; then
			cmd="pigz"
		else
			cmd="gzip"
		fi
	fi

	echo "Compressing .tar ($((size / 1000)) kB) using \`${cmd}\`…"
	"${cmd}" -v "${tmpFile}" || return 1
	[ -f "${tmpFile}" ] && rm "${tmpFile}"

	zippedSize=$(
		stat -f"%z" "${tmpFile}.gz" 2>/dev/null # macOS `stat`
		stat -c"%s" "${tmpFile}.gz" 2>/dev/null # GNU `stat`
	)

	echo "${tmpFile}.gz ($((zippedSize / 1000)) kB) created successfully."
}

# Determine size of a file or total size of a directory
function fs() {
	if du -b /dev/null >/dev/null 2>&1; then
		local arg=-sbh
	else
		local arg=-sh
	fi
	if [[ -n "$*" ]]; then
		du $arg -- "$*"
	else
		du $arg .[^.]* ./*
	fi
}

# Use Git's colored diff when available
if [[ "$(hash git &>/dev/null)" -eq 0 ]]; then
	function diff() {
		git diff --no-index --color-words "$@"
	}
fi

# Create a data URL from a file
function dataurl() {
	local mimeType
	mimeType=$(file -b --mime-type "$1")
	if [[ $mimeType == text/* ]]; then
		mimeType="${mimeType};charset=utf-8"
	fi
	echo "data:${mimeType};base64,$(openssl base64 -in "$1" | tr -d '\n')"
}

# Start a Python Simple Server on optional port {1:-8000}
function server() {
	local port="${1:-8000}"
	sleep 1 && open "http://localhost:${port}/" &#DevSkim: ignore

	# Set the default Content-Type to `text/plain`
	# instead of `application/octet-stream`
	# And serve everything as UTF-8 (although not technically correct,
	# this doesn't break anything for binary files)
	python -c $'import SimpleHTTPServer;\nmap = SimpleHTTPServer.SimpleHTTPRequestHandler.extensions_map;\nmap[""] = "text/plain";\nfor key, value in map.items():\n\tmap[key] = value + ";charset=UTF-8";\nSimpleHTTPServer.test();' "$port"
}
# Alternate version:
	# https://docs.python.org/3/library/http.server.html
	# https://www.pythonforbeginners.com/modules-in-python/how-to-use-simplehttpserver/
	# alias pyserver="python3 -m http.server 8080 --bind 127.0.0.1"

	# Start a PHP http server on optional port {1:-4000}
	# (Requires PHP 5.4.0+.)
	# http://php.net/manual/en/features.commandline.webserver.php
function phpserver() {
	local port
	port="${1:-4000}"
	local ip
	ip=$(ipconfig getifaddr en0)
	# en1 was the original parameter ... didn't work for me =)
	sleep 1 && open "http://${ip}:${port}/" &
	php -S -c "$PWD" "${ip}:${port}" -
}

# Compare original and gzipped file size
function gz() {
	local origsize
	origsize=$(wc -c <"$1")
	local gzipsize
	gzipsize=$(gzip -c "$1" | wc -c)
	local ratio
	ratio=$(echo "$gzipsize * 100 / $origsize" | bc -l)
	printf "orig: %d bytes\n" "$origsize"
	printf "gzip: %d bytes (%2.2f%%)\n" "$gzipsize" "$ratio"
}

# Run `dig` and display the most useful info
function digga() { dig +nocmd "$1" any +multiline +noall +answer; }

# Show all the names (CNs and SANs) listed in the SSL certificate
# for a given domain
function getcertnames() {
	if [ -z "${1}" ]; then
		echo "ERROR: No domain specified."
		return 1
	fi

	local domain="${1}"
	echo "Testing ${domain}…"
	echo "" # newline

	local tmp
	local certText
	tmp=$(echo -e "GET / HTTP/1.0\nEOT" |
		openssl s_client -connect "${domain}:443" -servername "${domain}" 2>&1)
	if [[ "${tmp}" == *"-----BEGIN CERTIFICATE-----"* ]]; then
		certText=$(echo "${tmp}" |
			openssl x509 -text -certopt "no_aux, no_header, no_issuer, no_pubkey, \
			no_serial, no_sigdump, no_signame, no_validity, no_version")
		echo "Common Name:"
		echo "" # newline
		echo "${certText}" | grep "Subject:" | sed -e "s/^.*CN=//" | sed -e "s/\/emailAddress=.*//"
		echo "" # newline
		echo "Subject Alternative Name(s):"
		echo "" # newline
		echo "${certText}" | grep -A 1 "Subject Alternative Name:" |
			sed -e "2s/DNS://g" -e "s/ //g" | tr "," "\n" | tail -n +2
		return 0
	else
		echo "ERROR: Certificate not found."
		return 1
	fi
}

# Normalize `open` across Linux, macOS, and Windows.
# This is needed to make the `o` function (see below) cross-platform.
if [ ! "$(uname -s)" = 'Darwin' ]; then
	if grep -q Microsoft /proc/version; then
		# Ubuntu on Windows using the Linux subsystem
		alias open='explorer.exe'
	else
		alias open='xdg-open'
	fi
fi

# `o` with no arguments opens the current directory, otherwise opens the given
# location
function o() {
	if [ $# -eq 0 ]; then
		open .
	else
		open "$@"
	fi
}

# tre options:
	# `tre` is a shorthand for `tree` with hidden files and color
	#  enabled, ignoring *some stuff*, listing directories
	#  first. The output gets piped into `less` with options to
	#  preserve color and line numbers, unless the output is
	#  small enough for one screen.
function tre() { tree -aC -I '.git|node_modules|bower_components' --dirsfirst "$@" | less -FRNX; }

# bash_colors stuff - not used with zsh
# if [ -z $default_color ]; then
# 	source "~/.dotfiles/src/bash_colors.sh";
# fi;

################################################################################
# * BASH tab completion
################################################################################
	# Add tab completion for many Bash commands
	if which brew &> /dev/null && [ -f "$(brew --prefix)/share/bash-completion/bash_completion" ]; then
		source "$(brew --prefix)/share/bash-completion/bash_completion";
	elif [ -f /etc/bash_completion ]; then
		source /etc/bash_completion;
	fi;

	[[ -r "/usr/local/etc/profile.d/bash_completion.sh" ]] && . "/usr/local/etc/profile.d/bash_completion.sh"
	############################################################################

	# Enable tab completion for `g` by marking it as an alias for `git`
	if type _git &> /dev/null && [ -f /usr/local/etc/bash_completion.d/git-completion.bash ]; then
		complete -o default -o nospace -F _git g;
	fi;

	############################################################################
	# Add tab completion for SSH hostnames based on ~/.ssh/config, ignoring wildcards
	# [ -e "$HOME/.ssh/config" ] && complete -o "default" -o "nospace" -W "$(grep "^Host" ~/.ssh/config | grep -v "[?*]" | cut -d " " -f2- | tr ' ' '\n')" scp sftp ssh;

	############################################################################
	# Add tab completion for `defaults read|write NSGlobalDomain`
	# You could just use `-g` instead, but I like being explicit
	# complete -W "NSGlobalDomain" defaults;

	############################################################################
	# Add `killall` tab completion for common apps
	# complete -o "nospace" -W "Contacts Calendar Dock Finder Mail Safari iTunes SystemUIServer Terminal Twitter" killall;
