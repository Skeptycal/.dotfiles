#!/usr/bin/env false zsh
# -*- coding: utf-8 -*-
    # shellcheck shell=bash
    # shellcheck source=/dev/null
    # shellcheck disable=2230,2086

    set -a
#? ######################## .functions - functions for macOS with zsh
    #* should not be run directly; called from .bash_profile / .bashrc / .zshrc

    #* copyright (c) 2019 Michael Treanor
    #* MIT License - https://www.github.com/skeptycal

    SET_DEBUG=${SET_DEBUG:-0} # set to 1 for verbose testing
    [[ ${SHELL##*/} = 'zsh' ]] && BASH_SOURCE=${(%):-%N} || "${BASH_SOURCE:-$0}"

#? ######################## Include Files
    # source files in directory containing functions by category
    source_dir ${DOTFILES_INC}/function_fol

    # log urls
    # . "$(which log_urls.sh)"

    # PIPLIST is not part of the normal python installation. It returns a list
    # of names of installed packages suitable for process and piping, without
    # the header and extra fields. The function recreates the list on demand
    # so it is always current.
    PIPLIST() { pip3 list | sed 's/  */ /g' | cut -d ' ' -f 1 | tail -n +3; }

    # create 'realpath' function if none exists
    command -v realpath >/dev/null 2>&1 || (
        realpath() {
            if [[ $1 = /* ]]; then
                echo "$1"
            else # echo "$PWD/${1#./}"
                cd -P -- "$1" || return
                pwd -P
            fi
        }
        )

    # space() {
    #     if [ -d $1 ]; then
    #         mnt=$1
    #     else
    #         mnt=''
    #     fi
    #     df $mnt -h | awk '{print $5}' | grep % | grep -v Use | sort -n | tail -1 | cut -d "%" -f1 -
    #     }

    # root_space() { df -P | grep '\/$' | awk '{print $5}' | cut -d "%" -f1 -; }

#? ######################## Weekly Tasks
    _sunday() {
        weekday=$(date +"%a")
        today=$(date +"")
        sun_file=~/.dotfiles/.sun_check
        if [[ $weekday = 'Sun' ]]; then
            if [ -f $sun_file ]; then
                read -r line < $sun_file
                line=$(tail -1 $sun_file)
                if [[ $line = "$today" ]]; then
                    rain 'Sunday tasks already done...'
                else
                    rain "It's Sunday! Performing weekly updates and refreshes..."

            # TODO -- add weekly update functions here ...
                    blue "Updating pip ..."
                    pip install --upgrade pip
                    cleanup
                    blue "Updating program version list ..."
                    save_versions & # 2>/dev/null
                    python -m ${DOTFILES_INC}/sunday
                fi
            fi
        fi
    }
#? ######################## Daily Tasks
#? ######################## Session Tasks
    _login_message() {
        me "os: ${LIME}$(uname -i) | $(sw_vers -productName) | $(sw_vers -productVersion)"
        me "shell: ${ATTN}zsh: $(zsh --version)"
        # green "  this zsh session: $ZSH_VERSION"
        br

        # Reminders to try out the latest features ...
        canary "Recently added utilities: "
        green "--------------------------
        versions            - to display program versions,
        checkpath           - display and check \$PATH,
        checkpath.py        - display and check \$PATH (alternate version),
        pc_remove.sh
        sysctl -a
        getURL              - gets url of active Chrome tab
        ping_avg            - average of ping times over 'COUNT' attempts
        log_urls            - logs urls from chrome constantly
        space [DEVICE]      - space remaining on drive (just the number from 'df')
        sunday              - weekly maintenance scripts [list|add|remove|edit|help]
        login_message       - this message!! [list|add|remove|edit|help]
        "
        br
    }
#? ######################## MAIN LOOP
    _main_() {
        _login_message
        _sunday
        # echo "Travis test: $TRAVIS_TOKEN"
        # travis login --github-token "$TRAVIS_TOKEN"
    }
#? ######################## ENTRY POINT
    _main_ "$@"

#? ######################## References
    # 	'find types' https://www.gnu.org/software/findutils/manual/html_mono/find.html#Type
    # pipe $2 with $1 using |&  https://unix.stackexchange.com/questions/128975/why-doesnt-grep-using-pipe-work-here
    # mkdir ref: https://www.cyberciti.biz/tips/bash-shell-parameter-substitution-2.html

    # ref: get url of Chrome active tab:
    # https://www.cyberciti.biz/faq/linux-unix-sleep-bash-scripting/
