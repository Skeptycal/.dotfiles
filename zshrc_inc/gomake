#!/usr/bin/env zsh
# -*- coding: utf-8 -*-
    # shellcheck shell=bash
    # shellcheck source=/dev/null
    # shellcheck disable=2178,2128,2206,2034
#? -----------------------------> .repo_tools - tools for repo management for macOS with zsh
	#*	system functions
	#*  tested on macOS Big Sur and zsh 5.8
	#*	copyright (c) 2021 Michael Treanor
	#*	MIT License - https://www.github.com/skeptycal
#? -----------------------------> https://www.github.com/skeptycal
#? -----------------------------> parameter expansion tips
 #? ${PATH//:/\\n}    - replace all colons with newlines
 #? ${PATH// /}       - strip all spaces
 #? ${VAR##*/}        - return only final element in path (program name)
 #? ${VAR%/*}         - return only path (without program name)

#? -----------------------------> environment
    DOTFILES_INC=~/.dotfiles/zshrc_inc # TODO - this is getting lost somewhere in the mix

	# repo_tools.sh includes ansi_colors.sh
	. ${DOTFILES_INC}/repo_tools.sh || . $(which repo_tools.sh)

	declare -ix SET_DEBUG=${SET_DEBUG:-0}  		#! set to 1 for verbose testing
    dbecho "\${DOTFILES_INC}: ${DOTFILES_INC}"

    SCRIPT_NAME=${0##*/}
    dbecho "\${SCRIPT_NAME}: ${SCRIPT_NAME}"

#? -----------------------------> debug info
	_debug_tests() {
		if (( SET_DEBUG )); then
			printf '%b\n' "${WARN:-}Debug Mode Details for ${CANARY}${SCRIPT_NAME##*/}${RESET:-}"
			green "Today is $today"
			_test_args "$@"
			dbecho "DEBUG mode is enabled. Set it to 0 to disable these messages."
			dbecho ""
			dbecho "ANSI colors active: $(which ansi_colors.sh)"
			dbecho "Git repo tools active: $(which repo_tools.sh)"
		fi
		}
    _debug_tests "$@"

    dbinfo() {
        dbecho "$0: $@"
    }
#? -----------------------------> main
    SET_DEBUG=0
    _DEV_GOMAKE=0

    is_prod() { [ $SET_DEBUG -eq 0 ]; }
    is_dev() { [ $SET_DEBUG -ne 0 ]; }

    _setup_environment() {
        dbinfo "Setup Environment"

        #/ ******* test setup
            #/ if the current directory is gomake_test, a special version
            #/ of this script will run for testing purposes
            #/ if PWD == gomake_test, clear test directory and remake everything ...
            if [[ ${PWD##*/} = "gomake_test" ]]; then
                warn "gomake_test directory found ... entering test mode."
                _DEV_GOMAKE=1
                cd ~
                rm -rf ~/gomake_test
                mkdir ~/gomake_test
                cd ~/gomake_test
            fi
        #/ ******* end test setup

        #* gh must be authenticated to use this script.
		_gh_auth_username
		if [[ -z ${_gh_user} ]]; then
			attn "gh must be authenticated to use this script."
            exists gh || ( gh --help; return 1; )
			gh auth login
            (( $? )) && ( attn "error running 'gh auth login' ... check https://cli.github.com/ "; return 1; )
            _gh_auth_username
            [[ -z ${_gh_user} ]] && ( attn "cannot log in to GitHub"; return 1; )
		fi

        dbecho "\$_gh_user (GitHub authenticated user): ${_gh_user}"
        dbecho "\${PWD} (current directory): ${PWD}"
    }

    _setup_local() {
        dbinfo "Setup local repo"

        #* check and setup local repo directory
        # create if needed and CD if possible
        if [[ -n "$1" ]]; then
            mkdir -p "$1" >/dev/null 2>&1
            cd "$1" || ( warn "error creating directory $1"; return 1 )
        fi

        # directory must be empty (certain parts of this setup can be run on existing repos)
        [ -n "$(ls -A ${PWD})" ] && ( warn "directory not empty"; return 1; )

    	#* set repo variables
		#* general information
			YEAR=$( date +'%Y'; )
            dbecho "\${YEAR}: ${YEAR}"

		#* local repo information
			REPO_PATH="${PWD%/*}"
			REPO_NAME="${PWD##*/}"
            dbecho ""
            dbinfo "\${REPO_PATH}: ${REPO_PATH}"
            dbecho "\${REPO_NAME}: ${REPO_NAME}"

    	#* Initial repo setup
			git init
            dbecho "\$?: $? - git init"

		#* file header blurbs
			BLURB_GO=$( _file_blurb )
			BLURB_INI=$( _file_blurb '#' )
            # dbecho "\${BLURB_GO}: ${BLURB_GO}"
            # dbecho "\${BLURB_INI}: ${BLURB_INI}"
    }

    _setup_remote() {
        dbinfo "Setup Remote Repo (${REPO_NAME})"
		#* github repo information
            GITHUB_TEMPLATE_PATH="https://github.com/skeptycal/gorepotemplate"
            GITHUB_USERNAME="${_gh_user}"
            GITHUB_URL="https://github.com/${GITHUB_USERNAME}"
            GITHUB_REPO_URL="${GITHUB_URL}/${REPO_NAME}"
            GITHUB_DOCS_URL="${GITHUB_REPO_URL}/docs"
            PAGES_URL="https://${GITHUB_USERNAME}.github.io/${REPO_NAME}"

            dbecho ""
            dbecho "\${GITHUB_TEMPLATE_PATH}: ${GITHUB_TEMPLATE_PATH}"
            dbecho "\${GITHUB_USERNAME}: ${GITHUB_USERNAME}"
            dbecho "\${GITHUB_URL}: ${GITHUB_URL}"
            dbecho "\${GITHUB_REPO_URL}: ${GITHUB_REPO_URL}"
            dbecho "\${GITHUB_DOCS_URL}: ${GITHUB_DOCS_URL}"
            dbecho "\${PAGES_URL}: ${PAGES_URL}"

        #* create remote repo from template (I use GitHub ... change it if you want)
            dbecho "gh repo create ${REPO_NAME} -y --private --template $GITHUB_TEMPLATE_PATH"
            gh repo create ${REPO_NAME} -y --private --template $GITHUB_TEMPLATE_PATH

            if (( $? )); then
                warn "error creating GitHub remote repo ${REPO_NAME}"
                is_prod && return 1; # dev mode may continue with existing repo
            fi

            # this should be done by gh ... but it doesn't always work
            dbecho git remote add origin "${GITHUB_REPO_URL}"
            git remote add origin "${GITHUB_REPO_URL}" >/dev/null 2>&1

            if (( $? )); then
                warn "error adding remote repository";
                is_prod && return 1; # dev mode may continue with existing repo
            fi

            # in the case of using an existing remote ... dev only
            dbecho git pull origin main --rebase
            git pull origin main --rebase >/dev/null 2>&1

            if (( $? )); then
                warn "error syncing remote repository"
                is_prod && return 1; # dev mode may continue with existing repo
            fi

        #* .gitignore and initial commit
            makeGI
            git add .gitignore -f
            git commit -m "initial commit"

            if (( $? )); then
                warn "error with initial commit";
                is_prod && return 1; # dev mode may continue with existing repo
            fi

            # push initial repository changes
            dbecho git push --set-upstream origin main
            git push --set-upstream origin main


            if (( $? )); then
                warn "error with initial remote repo push";
                is_prod && return 1; # dev mode may continue with existing repo
            fi
    }

    _setup_dirs() {
        # based on the unofficial and evolving https://github.com/golang-standards/project-layout

        # replace template example directories
        EXAMPLE_PATH="cmd/example/${REPO_NAME}"
        dbecho "\${EXAMPLE_PATH}: ${EXAMPLE_PATH}"
        EXAMPLE_FILE="${EXAMPLE_PATH}/main.go"
        dbecho "\${EXAMPLE_FILE}: ${EXAMPLE_FILE}"

        # remove template placeholder example files
        rm -rf go.sum
        rm -rf gorepotemplate.go

        rm -rf cmd  # could use 'mv' here, but ... better to start fresh

        mkdir -p "$EXAMPLE_PATH"
        touch "$EXAMPLE_FILE"

        #* .gitignore and initial commit
        # template examples cleared
        git add --all
        git commit -m 'remove template examples'
        git push origin main
    }

    _go_version() {
        go version
    }

readme() {
    REPO_NAME=${REPO_NAME:-${PWD##*/}}
    GOVERSION=$(_go_version)
    cat <<-EOF
# ${REPO_NAME}

> Tricky and fun utilities for Go programs.

---

![GitHub Workflow Status](https://img.shields.io/github/workflow/status/skeptycal/${REPO_NAME}/Go) ![Codecov](https://img.shields.io/codecov/c/github/skeptycal/${REPO_NAME})

[![Contributor Covenant](https://img.shields.io/badge/Contributor%20Covenant-v1.4%20adopted-ff69b4.svg)](code-of-conduct.md)

![Twitter Follow](https://img.shields.io/twitter/follow/skeptycal.svg?label=%40skeptycal&style=social) ![GitHub followers](https://img.shields.io/github/followers/skeptycal.svg?style=social)

---

## Getting Started

### Prerequisites

-   [Go](https://golang.org/)
-   [Git](https://git-scm.com/)
-   [GitHub CLI](https://cli.github.com/)
-

Developed with ${GOVERSION}. Go is \_extremely* backwards compatible and semver stable. Nearly any v1.x should work fine.

---

### Installation

To use this repo as a template for your own project:

```sh
gh repo create -y --public --template "https://github.com/skeptycal/${REPO_NAME}"
```

Clone this repo to test and contribute:

```bash
# add repo to $GOPATH (xxxxxx is your computer login username)
go get github.com/xxxxxx/${REPO_NAME}

cd ${GOPATH}/src/github.com/xxxxxx/${REPO_NAME}

# test results and coverage info
./go.test.sh

# install as a utility package
go install

```

Use the [Issues][issues] and [PR][pr] templates on the GitHub repo page to contribute.

---

### Basic Usage

> This is a copy of the example script available in the `cmd/example/${REPO_NAME}` folder:

```go
package main

import "github.com/skeptycal/${REPO_NAME}"

func main() {
    ${REPO_NAME}.Example()
}

```

To try it out:

```sh
# change to the sample folder
cd cmd/example/${REPO_NAME}

# run the main.go program
go run ./main.go

# to compile as an executable
go build
```

---

## Code of Conduct and Contributing

Please read CONTRIBUTING.md for details on our code of conduct, and the process for submitting pull requests to us. Please read the [Code of Conduct](CODE_OF_CONDUCT.md) for details before submitting anything.

---

## Versioning

We use SemVer for versioning. For the versions available, see the tags on this repository.

---

## Contributors and Inspiration

-   Michael Treanor ([GitHub][github] / [Twitter][twitter]) - Initial work, updates, maintainer
-   [Francesc Campoy][campoy] - Inspiration and great YouTube videos!

See also the list of contributors who participated in this project.

---

## License

Licensed under the MIT <https://opensource.org/licenses/MIT> - see the [LICENSE](LICENSE) file for details.

[twitter]: (https://www.twitter.com/skeptycal)
[github]: (https://github.com/skeptycal)
[campoy]: (https://github.com/campoy)
[fatih]: (https://github.com/fatih/color)
[issues]: (https://github.com/skeptycal/${REPO_NAME}/issues)
[pr]: (https://github.com/skeptycal/${REPO_NAME}/pulls)
EOF
        }

    _make_files() {
		#* GitHub repo files
        #* README.md
        GO_VERSION=$(_go_version)

			gac 'add README.md'

        #* idea.md
			cat >| idea.md <<-EOF
				# ${REPO_NAME}

				> $DESCRIPTION

				## Goals
				-

			EOF

        #* initial go file
			cat >| ${REPO_NAME}.go <<-EOF
				${BLURB_GO}

				// Package ${REPO_NAME} contains utilities for Go programs.
				package ${REPO_NAME}

				import "fmt"

				func Example() {
					fmt.Println("Example import acknowledgement from package ${REPO_NAME}")
				}
			EOF
			gac "add ${REPO_NAME}.go with Example()"

        #* example main.go file
			cat >| $EXAMPLE_FILE <<-EOF
				${BLURB_GO}

				// Example for package ${REPO_NAME}.
				package main

				import "github.com/skeptycal/${REPO_NAME}"

				func main() {
					fmt.Println("Example for the ${REPO_NAME} package.")
					${REPO_NAME}.Example()

					// add more code here ...

				}
			EOF
			gac "add ${EXAMPLE_FILE} (main Go run file)."

		#* GitHub Pages site setup
			git checkout -b gh-pages
            git fetch
			git push origin gh-pages
			mkdir -p docs
            cat >| docs/index.html <<-EOF
				${BLURB_GO}

				// Example for package ${REPO_NAME}.
				package main

				import "github.com/skeptycal/${REPO_NAME}"

				func main() {
					fmt.Println("Example for the ${REPO_NAME} package.")
					${REPO_NAME}.Example()

					// add more code here ...

				}
			EOF
            gac "initial GitHub Pages site"

        #* dev branch and initial dev version
            git checkout -b dev
            git fetch
            git push origin dev

		    #* Go module setup
			go mod init
			go mod tidy
			go doc >| go.doc
            gac "Go module setup"

    }

    version() {
        # echo $(git describe --tags $(git rev-list --tags --max-count=1))
        git tag | sort -V | tail -n 1
    }

    bump() {
        #* Bump version

        local old=$SET_DEBUG
        SET_DEBUG=0 # constant dev mode verbosity level

        local vv=
        local dev=

        vv=$(echo $(version) | cut -d '-' -f 1)
        [ -z $vv ] && vv='v0.1.0'
        dbecho "\$vv: $vv"

        local vv=${vv#v*}
        dbecho "\$vv (remove 'v'): $vv"

        local major=${vv%%.*}
        dbecho "\$major: $major"

        vv=${vv#*.}
        local minor=${vv%%.*}
        dbecho "\$minor: $minor"

        vv=${vv#*.}
        local patch=${vv%%.*}
        dbecho "\$patch: $patch"

        case "$1" in
            major)
                major=$(( major + 1 ))
                dbecho "\$major increased: $major"
                minor=0
                dbecho "\$minor reset: $minor"
                patch=0
                dbecho "\$patch reset: $patch"
                ;;

            minor)
                minor=$(( minor + 1 ))
                dbecho "\$minor increased: $minor"
                patch=0
                dbecho "\$patch reset: $patch"
                ;;

            patch)
                patch=$(( patch + 1 ))
                dbecho "\$patch increased: $patch"
                ;;

            dev)
                shift
                devtag "$@"
                return
                ;;

            *)
                echo "current version: $(version)"
                usage bump '[major|minor|patch|dev][message]'
                dbecho "default case \$version: $version"
                return 0
                ;;

        esac

        printf -v version "v%s.%s.%s" $major $minor $patch
        dbecho "\$version: $version"

        echo "new version: $version"
        git tag "$version"
        git push origin --tags
        SET_DEBUG=old # constant dev mode verbosity level

    }

    usage() {
        if [ -z "$1" ]; then
            white "usage: ${MAIN:-}${0} ${DARKGREEN:-}app [args]"
            return 1
        fi

        local app="$1"
        shift
        white "usage: ${MAIN:-}${app} ${DARKGREEN:-}${@}"
    }

    devtag() {
        #* Tag Dev version

        local vv=$(version)
        local dev=
        local message=

        if [ -n "$1" ]; then
            message="(GoBot) devtag version ${version}: ${1}"
            shift
            echo "$message"
        fi

        vv=${vv%%-*}
        [ -z $vv ] && vv='v0.1.0'
        dbecho "\$vv: $vv"

        printf -v dev "%16.16s" $(date +'%s%N')
        dbecho "\$dev: $dev"

        version="${vv}-${dev}"
        dbecho "\$version: $version"

        git tag "$version"
        echo $version >|VERSION
        git add VERSION
        if [ -n "$message" ]; then
            git commit -m "$message"
        else
            git commit -m "(GoBot) devtag version ${version}" # only used if no message was provided
        fi
        git push origin --tags
        git push origin --all
        # gac "Dev version ${version}"

        white "new Git version tag: ${MAIN:-}$version"
    }

#! repo testing ...
# alias streamtest='cdgo; del stream; mkd stream; gomake'

    _gomake() {
        _setup_environment "$@"
        _setup_local "$@"
        _setup_remote "$@"
        _setup_dirs "$@"
        _make_files "$@"
        devtag "$@"
    }

    gomake() {
        case "$1" in

            -v|--version|version)
                echo "gomake version "
                return 0
                ;;

            -h|--help|help)
                echo "Usage: gomake [reponame] [--files] [--up]"
                return 0
                ;;

            --files|files)
                shift
                _make_files "$@"
                return
                ;;

            --devtag|devtag)
                shift
                devtag "$@"
                return
                ;;

            --bump|bump)
                shift
                version "$@"
                return
                ;;

            init)
                shift
                _gomake "$@"
                ;;

            *)

                usage gomake '[init|bump|help|files|devtag]'
                return 0
                ;;
        esac
    }

    version=$(version)
    gomake "$@"
