#!/usr/bin/env bash
# .project_defaults : project_defaults for repo setup (version 0.0.1)

# usage: source "/path/to/this/file/.project_defaults"

# author    - Michael Treanor  <skeptycal@gmail.com>
# copyright - 2019 (c) Michael Treanor
# license   - MIT <https://opensource.org/licenses/MIT>
# github    - https://www.github.com/skeptycal
###############################################################################
# Identify default settings path
#   default is the folder that this global script is running from
#
#   (location for default copies of .info.cfg, .gitignore, README.md
#   .travis.yml, bitbucket_pipelines.yml, codedov.yml, gpg_public.txt
#   requirements.txt, Pipfile, setup.py, .pre-commit-config.yaml, etc)
#
#   you may adjust as needed to use a separate settings folder,
#   (e.g.) bin_path="$HOME/bin/utilities/",

# bin_path=$(realpath $0)
# bin_path="${bin_path%/*}"
#! (CHANGE THIS TO YOURS)
[[ -z "$bin_path" ]] && export bin_path="/Volumes/Data/skeptycal/bin/utilities/pc_bak"
[[ -z "$script_path" ]] && export script_path="/Volumes/Data/skeptycal/bin/utilities/scripts"

# echo $bin_path
# echo $script_path

###############################################################################
# utilities
[[ -z "${script_path}/basic_text_colors.sh" ]] && source "${script_path}/basic_text_colors.sh" &>/dev/null

# set boolean whether color is available or not
[[ $? ]] && export USE_COLOR=true || USE_COLOR=false

we $USE_COLOR

[[ -z "${script_path}/file_utils.sh" ]] &&source "${script_path}/file_utils.sh" &>/dev/null

###############################################################################
# project_defaults
function check_file() {
    # testing file properties
    # parameter: $1 - name of file to check
    # return: $check_file_output - list of file properties
    local name=$1
    local path=(${!1})
    # echo "name: $name"
    # echo "path: $path"
    local tmp_chk=''
    [[ -e "$path" ]] && tmp_chk="${tmp_chk} exists" || tmp_chk="${tmp_chk} does-not-exist"
    [[ -f "$path" ]] && tmp_chk="${tmp_chk} regular"
    [[ -L "$path" ]] && tmp_chk="${tmp_chk} link"
    [[ -d "$path" ]] && tmp_chk="${tmp_chk} directory"
    [[ -r "$path" ]] && tmp_chk="${tmp_chk} readable"
    [[ -s "$path" ]] && tmp_chk="${tmp_chk} size>0"
    [[ -w "$path" ]] && tmp_chk="${tmp_chk} writable"
    [[ -x "$path" ]] && tmp_chk="${tmp_chk} executable"
    [[ -O "$path" ]] && tmp_chk="${tmp_chk} owned-by-me"
    [[ -N "$path" ]] && tmp_chk="${tmp_chk} dirty"
    [[ -k "$path" ]] && tmp_chk="${tmp_chk} sticky"
    # echo " ->$tmp_chk"
    # echo ''
    check_file_output=$tmp_chk
}

function initialize() {
    # set boolean whether color is available or not
    if [[ $? ]]; then
        USE_COLOR=true
    else
        USE_COLOR=false
    fi

    # parameter expansion to remove trailing /filename
    # _path="${0%/*}"
    # current directory
    export here=$PWD
    print $here

    # directory where I store project defaults
    #! (CHANGE THIS TO YOURS)
    export bin_path="/Volumes/Data/skeptycal/bin/utilities/pc_bak"

    # set backup directory; create if needed
    export backup_dir="${here}/bak"
    [[ -d "${backup_dir}" ]] || mkdir -pv "$backup_dir" &>/dev/null

    # Set default readme file (usually <md> or <rst>)
    #    (<1st>, <now>, <txt>, or <asc> are older forms.)
    export readme="${here}/README.md"

    # source local configuration file (.info.cfg) or default
    [[ -f "${here}/.info.cfg" ]] && info_file="${here}/.info.cfg"
    source "${info_file}" &>/dev/null || source "${bin_path}/.info.cfg" &>/dev/null
}

bak() { # backup $1 to bak/$1.bak
        #    add extension .bak
    bak_file="$here/$1"
    if [[ -z "$backup_dir" ]]; then
        we "Error: backup directory not available for ${bak_file}."
    else

        [ -r "$bak_file" ] && cp -f "$bak_file" "$backup_dir/$1.bak" &>/dev/null || we "Not able to create backup for ${bak_file}."
        # echo "copy text: $here/$1 $backup_dir/$1.bak "

    fi
}


###############################################################################
# cli check
fd=0   # stdin
if [ -t "$fd" ]; then
    # interactive
    echo "This script was not intended to be run directly."
else
    # non-interactive
    initialize
fi
###############################################################################
# basic_text_colors info
#
# color codes available - e.g. to use WARN in a string, type $WARN
# MAIN, WARN, COOL, GO, CHERRY, CANARY, ATTN, PURPLE, RESET
#
# function list
# test_color_output # test_color_output - print samples of available colors
# echo # This makes echo more consistent and portable
# br # yes, this is a fake cli version of <br />
# ce # ce - generic color echo (used manually or called from specific function)
# me # MAIN echo
# we # red WARN echo
# be # COOL blue echo
# ge # GO green echo
# oe # orange ATTN echo
# pe # purple PURPLE echo
