#!/usr/bin/env false bash
# -*- coding: utf-8 -*-
# cannot be run directly
#? ############################# skeptycal.com ################################
NAME="${BASH_SOURCE##*/}"
VERSION='0.2.0'
DESC='personalized Bash config ((Bash 5.0 on macOS with GNU coreutils)'
USAGE="source ${NAME} [help|test|usage|version]"
AUTHOR="Michael Treanor  <skeptycal@gmail.com>"
COPYRIGHT="Copyright (c) 2019 Michael Treanor"
LICENSE="MIT <https://opensource.org/licenses/MIT>"
GITHUB="https://www.github.com/skeptycal"
#? ############################################################################
# DEBUG='1' # set to 1 for verbose testing

# Paths
_set_config_paths() {
    export script_name="${BASH_SOURCE##*/}"
    export script_path="${BASH_SOURCE%/*}"
    export src_path="${script_path}/src"
    export bak_path="${script_path}/bak"
    export bin_path="${HOME}/bin/utilities/pc_bak"
    export dotfiles_path="${HOME}/.dotfiles"
    export here="$PWD"

    db_echo() {
        # report data and errors in scripting
        #    - DEBUG is set to '1' to report errors
        #    - use log_toggle() to include file logging
        [[ $DEBUG == '1' ]] && warn "$(date "+%D %T") $@"
    }
    source_file() {
        db_echo "Script source: ($BASH_SOURCE)"
        if [[ -s "$1" ]]; then
            source "$1"
        elif [[ -L "$1" ]]; then
            source "$1"
        elif [[ -s "${HOME}/bin/$1" ]]; then
            source "${HOME}/bin/$1"
        elif [[ -s "$(which $1)" ]]; then
            source "$(which $1)"
        elif [[ -s "${PWD}/$1" ]]; then
            source "${PWD}/$1"
            db_echo "The source file ($1) loaded in script ($BASH_SOURCE) should include the path $PWD"
            db_echo "Script source: ($BASH_SOURCE)"
        elif [[ -s "$(which ${1}.sh)" ]]; then
            source "$(which ${1}.sh)"
            db_echo "The source file ($1) loaded in script ($BASH_SOURCE) should include the extension .sh"
            db_echo "Script source: ($BASH_SOURCE)"
        elif [[ -s "$(which ${1}.py)" ]]; then
            source "$(which ${1}.py)"
            db_echo "The source file ($1) loaded in script ($BASH_SOURCE) was not found, but was replaced with the python script (${1}.py)."
            db_echo "Script source: ($BASH_SOURCE)"
        else
            db_echo "The source file ($1) listed in script ($BASH_SOURCE) could not be found. A search was made for items in the path, ${1}.sh, and ${1}.py without results."
            db_echo "Script source: ($BASH_SOURCE)"
        fi
    }
}

_run_debug_config() {
    ce "Script source:$MAIN $BASH_SOURCE$RESET"
    green "\$dotfiles_path is set to $dotfiles_path."
    green "\$here is set to as $here."
}
main_config() {
    # [[ -z "$WARN" ]] &&
    source "${HOME}/.dotfiles/basic_text_colors.sh"
    _set_config_paths
    [[ $DEBUG == '1' ]] && _run_debug_config
}

# [[ -z "$dotfiles_path" ]] ÃŸ&&
main_config "$@"

# identify this actual script name and current directory path
# _self=${0##*/}
# parameter expansion to remove trailing /filename
# _path="${0%/*}"
