#!/usr/bin/env zsh
# -*- coding: utf-8 -*-
[[ -z "$BASH_SOURCE" ]] && BASH_SOURCE="$0" # to ease the transition to zsh
#? ############################# skeptycal.com ################################
NAME="${BASH_SOURCE##*/:'standard_script_modules'}"
VERSION='0.1.2'
DESC='standard script modules for macOS (zsh / Bash 5.0 with GNU coreutils)'
USAGE="source ${NAME:-} [help|test|usage|version]"
AUTHOR="Michael Treanor  <skeptycal@gmail.com>"
COPYRIGHT="Copyright (c) 2019 Michael Treanor"
LICENSE="MIT <https://opensource.org/licenses/MIT>"
GITHUB="https://www.github.com/skeptycal"
#? ############################################################################
export SET_DEBUG=1        # set to 1 for verbose testing
export SSM_LOADED=1       # prevent repeat loading
exec 6>&1 # non-volatile stdout leaves return values of stdout undisturbed
# return 0
source $(which ssm_resources)

# TODO - works in progress ##############################################
#   - automate creation of TOC
#   - use       declare -F ??
get_function_list() {
    cat "$1" | grep '() {' | sed 's/\(\.*\)*() {/\1/' | sed 's/function //' | sed 's/^[# ]*//' | sed 's/cat//' | cut -d ' ' -f1
    }

#* ######################## program debugging / logging functions
# log_toggle() {
    #   usage: log_toggle [filename]
    #   toggle on and off logging to file
    #       parameter
    #           filename    - name of new logfile (default LOGFILE)
    #       variable $LOG stores state
    #       variable $LOGFILE stores filename
    #   reference: https://unix.stackexchange.com/questions/80988/how-to-stop-redirection-in-bash

    # set default log filename or $1
    # # TODO this function is generating sporadic errors ...
    # return 0
    # if [[ -z "$1" ]]; then
    #     if [[ -z "$LOG_FILE_NAME" ]]; then
    #         LOG_FILE_NAME="${script_source:-'./'}LOGFILE.log"
    #     fi
    # else
    #     LOG_FILE_NAME="${1}"
    # fi
    # touch "$LOG_FILE_NAME"
    # # if log is on, turn it off
    # if [[ "$LOG" == '1' ]]; then
    #     LOG='0'
    #     exec 1>&4- 2>&5-
    #     attn "logging off ..."
    # else # if it is off ... turn it on
    #     LOG='1'
    #     exec 4>&1 5>&2
    #     # log to the filename stored in $LOG_FILE_NAME
    #     db_echo "\${LOG_FILE_NAME}: ${LOG_FILE_NAME}"
    #     exec > >(tee -a -i "${LOG_FILE_NAME}") 2>&1
    #     attn "logging on ..."
    # fi
    # }
test_echo() {
    # log the current value of a given variable ($1)
    # usage: test_echo <test name> <test code>
    # report test results if:
    #    - SET_DEBUG is set to '1' or cli [test] option set
    #    - use log_toggle() to include file logging
    if [[ $SET_DEBUG == '1' ]] && [[ -n "$1" ]]; then
        printf "%bFunction Test -> %bPID %s %b" "$MAIN" "$CANARY" "$$" "$GO"
        printf '%(%Y-%m-%d)T' -1
        printf "%b test name: %s\n%b" "$ATTN" "$1" "${RESET_FG:-}"
        shift
        eval "$@"
        printf "%bResult = %s%b\n" "$COOL" "$?" "${RESET_FG:-}"
    fi
    }
test_var() {
    # usage: test_var <test variable>
    # report test results if:
    #    - SET_DEBUG is set to '1' or cli [test] option set
    #    - use log_toggle() to include file logging
    # reference:
    #   indirect variables: https://wiki.bash-hackers.org/syntax/pe#indirection
    #   bash printf: https://www.linuxjournal.com/content/bashs-built-printf-function
    if [[ $SET_DEBUG == '1' ]] && [[ -n "$1" ]]; then
        local testvar="${1}"
        echo "\$testvar: $testvar"
        echo "testvar: " ${!testvar}
        echo ''
        printf "%bVariable Test -> %bPID %s %b" "$MAIN" "$CANARY" "$$" "$GO"
        printf '%(%Y-%m-%d)T' -1
        printf "%b %15s -%b %s %b\n" "$ATTN" "\$$testvar" "$WARN" "$testvar" "$RESET_FG"
    fi
    }
log_flag() { rain "#? ############################################################################"; }
#* ######################## paramter handling
parse_options() {
    # parse basic options [help|test|usage|version] & SET_DEBUG
    # TODO the 'exits' and lack of shifts make this function inadequate
    # TODO use standard functions in a wrapper instead
    case "$1" in
    -h | --help | help)
        set_man_page
        echo "$MAN_PAGE"
        return
        # exit 0
        ;;
    -t | --test | test)
        [[ ! "$SET_DEBUG" == '1' ]] && _run_tests
        return
        # exit 0
        ;;
    -u | --usage | usage)
        me "$USAGE"
        return
        # exit 0
        ;;
    -v | --version | version)
        ce "${MAIN}${NAME}${WHITE} (version ${VERSION})${RESET_FG}"
        return
        # exit 0
        ;;
        # *) ;;
    esac
    }

#* ######################## error handling
_set_traps() {
    cur_opts="$-"
    debug_opts="axET"
    set "-${cur_opts}${debug_opts}"
    }

_trap_error() {
    me "ERR: $ERR"
    set "-${cur_opts}"
    # return 0
    }
_trap_debug() {
    # return 0
    ce "Script source:$MAIN $BASH_SOURCE$RESET_FG $@ \n"
    attn "echo VARIABLE ($VARIABLE) is being used here."
    }
_trap_exit() {
    # https://stackoverflow.com/a/50270940/9878098
    exitcode=$?
    printf 'error executing script...\n' 1>&2
    printf 'exit code returned: %s\n' "$exitcode"
    printf 'the command executing at the time of the error was: %s\n' "$BASH_COMMAND"
    printf 'command present on line: %d' "${BASH_LINENO[0]}"
    # Some more clean up code can be added here before exiting
    set "-${cur_opts}"
    exec 4>&- 5>&- 6>&-
    if [[ "$LOG" == '1' ]]; then
        LOG='0'
        exec 1>&4 2>&5
        exec 4>&- 5>&-
        attn "logging off ..."
    fi

    exit $exitcode
    }
#* ######################## script tests
_run_tests() {
    _run_debug_config() {
        green "\$dotfiles_path is set to $dotfiles_path."
        green "\$here is set to as $here."
        }
    _bt_color_sample_test() {
        echo -e "${MAIN}C ${WARN}O ${COOL}L ${GO}O ${CHERRY}R   ${CANARY}T ${ATTN}E ${PURPLE}S ${RESET_FG}T"
        echo -e "${MAIN}MAIN   ${WARN}WARN   ${COOL}COOL   ${GO}GO   ${CHERRY}CHERRY   ${CANARY}CANARY   ${ATTN}ATTN   ${RAIN}RAIN   ${RESET_FG}RESET_FG"
        }
    _test_standard_script_modules() {
        _EXIT_USAGE_TEXT="${MAIN}${script_name}${WHITE} - macOS script"
        # log file for test sesssion
        LOG_FILE_NAME="${script_source}ssm_debug_test.log"
        # functions that include an 'exit' will skip it so tests can continue
        DONT_DIE='1'
        # log everything to LOG_FILE_NAME
        # log_toggle

        ce "${COOL}BASH_SOURCE:$MAIN $BASH_SOURCE$RESET_FG"
        log_flag

        test_var "$script_name"
        test_var "$script_source"
        test_var "$SET_DEBUG"
        test_var "$DONT_DIE"
        test_var "$LOG"
        test_var "$LOG_FILE_NAME"

        # TODO add tests for these functions as needed
        test_echo "die() test" "die 'die test!'"
        test_echo "db_echo() test" "db_echo 'This is the test argument'"
        test_echo "urlencode() test" "url_encode 'https://www.github.com/skeptycal'"
        db_echo "$encoded"
        test_echo "urlencode() test" "url_decode 'http%3A%2F%2Fwww.github.com%2Fskeptycal'"
        db_echo "$decoded"
        fake_filename="$LOG_FILE_NAME"
        test_var "$fake_filename"
        test_echo "real_name() test" "real_name $fake_filename"

        test_echo "in_list() test" "in_list '1' '123'"
        test_echo "in_list() test" "in_list 'ok' 'this is ok'"
        test_echo "in_list() test" "in_list 'j' 'klm')"
        test_echo "in_list() test" "in_list 'doc' '( txt rtf rtfd html doc docx odt wordml webarchive )')"

        log_flag
        result="${fake_filename##*/}"
        test_var "$result"

        # cleanup test environment
        # log_toggle
        unset DONT_DIE
        unset LOG_FILE_NAME
        unset _EXIT_USAGE_TEXT
        unset LOG
        }
    ce "Script source:$MAIN ${BASH_SOURCE}$RESET_FG"
    echo ${filename##*/}
    ce "Script source:$MAIN ${BASH_SOURCE[0]##*/}${RESET_FG:-}\n"
    ce "Script parent:$MAIN ${BASH_SOURCE[1]##*/}${RESET_FG:-}\n"
    ce "Script grandparent:$MAIN ${BASH_SOURCE[2]##*/}${RESET_FG:-}\n"
    _run_debug_config
    _bt_color_sample_test
    _test_standard_script_modules
    return 0
    }
#* ######################## main loop
_main_standard_script_modules() {
    # _debug_function_header
    # [[ $SET_DEBUG == 1 ]] &&
    # _set_traps
    parse_options "$@"
    [[ $SET_DEBUG == 1 ]] && _run_tests
    }

#* ######################## entry point

# trap _trap_error ERR
# trap _trap_exit EXIT
# trap _trap_debug DEBUG
db_echo "\nTesting script ${NAME} version ${VERSION}."
_main_standard_script_modules "$@"

#? ############################################################################
#* Resources found in ssm_resources
    # _debug_function_header, in_list
    #* ######################## C++ style error messages
    # EX_OK, EX_USAGE, EX_DATAERR, EX_NOINPUT, EX_NOUSER, EX_NOHOST, EX_UNAVAILABL, EX_SOFTWARE, EX_OSERR, EX_OSFILE, EX_CANTCREAT, EX_IOERR, EX_TEMPFAIL, EX_PROTOCOL, EX_NOPERM, EX_CONFIG
    #* ######################## BASH trap signals
    # TRAP_SIGHUP, TRAP_SIGINT, TRAP_SIGQUIT, TRAP_SIGILL, TRAP_SIGTRAP, TRAP_SIGABRT, TRAP_SIGEMT, TRAP_SIGFPE, TRAP_SIGKILL, TRAP_SIGBUS, TRAP_SIGSEGV, TRAP_SIGSYS, TRAP_SIGPIPE, TRAP_SIGALRM, TRAP_SIGTERM, TRAP_SIGURG, TRAP_SIGSTOP, TRAP_SIGTSTP, TRAP_SIGCONT, TRAP_SIGCHLD, TRAP_SIGTTIN, TRAP_SIGTTOU, TRAP_SIGIO, TRAP_SIGXCPU, TRAP_SIGXFSZ, TRAP_SIGVTALRM, TRAP_SIGPROF, TRAP_SIGWINCH, TRAP_SIGINFO, TRAP_SIGUSR1, TRAP_SIGUSR2
    #* ######################## ANSI constants for common colors
    # br, ce, me, warn, blue, green, cherry, canary, attn, purple, rain, white
    # MAIN, WARN, COOL, BLUE, GO, CHERRY, CANARY, ATTN, PURPLE, RAIN, WHITE, RESTORE, RESET_FG
    #* ######################## program configuration
    # set_man_page, get_linux_platform_name, get_current_os_name
    #* ######################## program control flow functions
    # async_run, db_echo, die, yes_no, no_yes, exit_usage, print_usage, db_script_source
    #* ######################## file manipulation functions
    # source_file, hex_dump, url_encode, url_decode
    #* ######################## path manipulation functions
    # real_name, parse_filename, get_safe_new_filename
