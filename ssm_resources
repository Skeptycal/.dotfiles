#!/usr/bin/env zsh
# -*- coding: utf-8 -*-
# Standard project and usage information to include in scripts
[[ $ZSH_EVAL_CONTEXT =~ :file$ ]] || return 0
#? ######################## Project Information
    NAME=${NAME:="${BASH_SOURCE##*/}"}
    VERSION=${VERSION:='1.2.0'}
    DESC=${DESC:='Script Resources for ssm on macOS'}
    USAGE="source ${NAME:-} [help|test|usage|version]"

    . $(which ssm_usage)
    declare -ix SET_DEBUG=0   # set to 1 for verbose testing

    # exec 6>&1 # non-volatile stdout leaves return values of &1 undesturbed
    set -aET
    # return 0

# TODO
#   - automate creation of TOC
#* ############################################################################
# setup global functions and variables
#   functions beginning with _ are only called 'by the script'
#   others are reusable in any script as needed

function _header_test_log() {
    [[ -z $DEBUG_LOG ]] && return 64
    printf "%b " "$@" >&2
    printf "%b" "\n"
}

function _debug_function_header() {
    eval $_debug_function_header_text
}
function l() {
    # added 'list' default parameter instead of 'help'
    eval "launchctl ${@:-list}"
}
#TODO ....................
#? ######################## functions
#* ######################## program configuration
# set_man_page, get_linux_platform_name, get_current_os_name
#* ######################## program configuration
get_current_os_name() {
    eval $debug_status_test

    local uname=$(uname)
    if [ "$uname" = "Darwin" ]; then
        echo "osx"
        return 0
    elif [ "$uname" = "FreeBSD" ]; then
        echo "freebsd"
        return 0
    elif [ "$uname" = "Linux" ]; then
        local linux_platform_name
        linux_platform_name="$(get_linux_platform_name)" || { echo "linux" && return 0; }

        if [[ $linux_platform_name == "rhel.6" ]]; then
            echo $linux_platform_name
            return 0
        elif [[ $linux_platform_name == alpine* ]]; then
            echo "linux-musl"
            return 0
        else
            echo "linux"
            return 0
        fi
    fi

    db_echo "OS name could not be detected: UName = $uname"
    return 1
}
#* ######################## program control flow functions
#* db_echo, die, yes_no, no_yes, exit_usage, print_usage, db_script_source, async_run
db_echo() {
    # db_echo() { [[ $SET_DEBUG == 1 ]] && warn "${@:-}${RESET_FG:-}"; }
    # report data and errors in scripting
    #    - SET_DEBUG is set to '1' to report errors
    #    - use log_toggle() to include file logging
    # using stream 2 (stderr)

    if [[ $SET_DEBUG == '1' ]]; then
        warn "debug info ($(date "+%D %T")) - $@" >&2
    fi
    # printf "%b\n" "${cyan:-}dotnet-install:${normal:-} $1" >&3
    }
die() {
    # exit program with $exit_code ($1) and optional $message ($2)
    # https://stackoverflow.com/questions/7868818/in-bash-is-there-an-equivalent-of-die-error-msg/7869065

    warn "${2:-"Script died...$USAGE"}" >&2
    db_echo "${MAIN}line ${BLUE}${BASH_LINENO[0]}${MAIN} of ${ATTN}${FUNCNAME[1]}${MAIN} in ${BASH_SOURCE[1]}${MAIN}." >&2
    [[ ! "$DONT_DIE" == '1' ]] && exit "${1:-1}"
    }
yes_no() {
    # Accept a Yes/no (default Yes) user response to prompt ($1 or default)
    echo -n "${1:-'[Yes/no]: '}"
    read yno
    case $yno in
    [nN] | [n | N][O | o])
        return 1
        ;;
    *) # default 'Yes' ... see function no_yes for default 'No'
        return 0
        ;;
    esac
    }
no_yes() {
    # Accept a yes/No (default No) user response to prompt ($1 or default)
    echo -n "${1:-'[No/yes]: '}"
    read yno
    case $yno in
    [yY] | [yY][Ee][Ss])
        return 1
        ;;
    *) # default 'No' ... see function yes_no for default 'Yes'
        return 0
        ;;
    esac
    }
exit_usage() {
    # Print script usage and exit
    # TODO replace with die()
    # Parameters:
    #   $1 - specific message (e.g. 'file not found')
    #   $2 - optional usage text
    die "$@"
    }
print_usage() {
    set_man_page
    echo "$MAN_PAGE"
    }
#* ######################## program logging functions
log_toggle() {
    #   usage: log_toggle [filename]
    #   toggle on and off logging to file
    #       parameter
    #           filename    - name of new logfile (default LOGFILE)
    #       variable $LOG stores state
    #       variable $LOGFILE stores filename
    #   reference: https://unix.stackexchange.com/questions/80988/how-to-stop-redirection-in-bash

    # set default log filename or $1
    if [[ -z "$1" ]]; then
        if [[ -z "$LOG_FILE_NAME" ]]; then
            LOG_FILE_NAME="${script_source}LOGFILE.log"
        fi
    else
        LOG_FILE_NAME="${1}"
    fi
    touch "$LOG_FILE_NAME"
    # if log is on, turn it off
    if [[ "$LOG" == '1' ]]; then
        LOG='0'
        exec 1>&4 2>&5
        exec 4>&- 5>&-
        attn "logging off ..."
    else # if it is off ... turn it on
        LOG='1'
        exec 4>&1 5>&2
        # log to the filename stored in $LOG_FILE_NAME
        db_echo "\${LOG_FILE_NAME}: ${LOG_FILE_NAME}"
        exec > >(tee -a -i "${LOG_FILE_NAME}") 2>&1
        attn "logging on ..."
    fi
    }
test_echo() {
    # log the current value of a given variable ($1)
    # usage: test_echo <test name> <test code>
    # report test results if:
    #    - SET_DEBUG is set to '1' or cli [test] option set
    #    - use log_toggle() to include file logging
    if [[ $SET_DEBUG == '1' ]] && [[ -n "$1" ]]; then
        printf "%bFunction Test -> %bPID %s %b" "$MAIN" "$CANARY" "$$" "$GO"
        printf '%(%Y-%m-%d)T' -1
        printf "%b test name: %s\n%b" "$ATTN" "$1" "$RESET"
        shift
        local
        eval "$@"
        printf "%bResult = %s%b\n" "$COOL" "$?" "${RESET}"
    fi
    }
test_var() {
    # usage: test_var <test variable>
    # report test results if:
    #    - SET_DEBUG is set to '1' or cli [test] option set
    #    - use log_toggle() to include file logging
    # reference:
    #   indirect variables: https://wiki.bash-hackers.org/syntax/pe#indirection
    #   bash printf: https://www.linuxjournal.com/content/bashs-built-printf-function
    if [[ $SET_DEBUG == '1' ]] && [[ -n "$1" ]]; then
        local testvar="${1}"
        echo "\$testvar: $testvar"
        echo "testvar: " ${!testvar}
        echo ''
        echo ''
        printf "%bVariable Test -> %bPID %s %b" "$MAIN" "$CANARY" "$$" "$GO"
        printf '%(%Y-%m-%d)T' -1
        printf "%b %15s -%b %s %b\n" "$ATTN" "\$$testvar" "$WARN" "$testvar" "$RESET"
    fi
    }
log_flag() { rain "#? ############################################################################"; }
#* ######################## path manipulation functions
real_name() {
    # TODO test this further ... working on a bash only method
    # test_var "$1"
    # log_flag
    filename="${!1}"
    filename="${1##*/}"
    echo $filename
    }
parse_filename() {
    #   usage: parse_filename [filename]
    #   parameter
    #       filename    - $1 or global $filename used
    #   returns
    #       base_name   - file name only (no path)
    #       dir         - path only
    #       name_only   - name without extension
    #       extension   - file extension or '' if none

    # set filename
    [[ -n "$1" ]] && filename="$1"
    # if no filename, error & exit
    [[ -z "$filename" ]] && exit_usage "\$filename not available or specified ..." "${MAIN}parse_filename ${WHITE}[filename]"
    test_var "$filename"
    log_flag
    [[ -r "$filename" ]] && exit_usage "\$filename not readable ..." "${MAIN}parse_filename ${WHITE}[filename]"
    base_name="${filename##*/}"
    # Strip longest match of */ from start
    dir="${filename:0:${#filename}-${#base_name}}"
    # Substring from 0 thru pos of filename
    name_only="${base_name%.[^.]*}"
    # Strip shortest match of . plus at least one non-dot char from end
    extension="${base_name:${#name_only}+1}"
    # Substring from len of base thru end
    if [[ -z "$name_only" && -n "$extension" ]]; then
        # If we have an extension and no base, it's really the base
        name_only="$extension"
        extension=""
    fi
    }
get_safe_new_filename() {
    # usage: get_safe_new_filename filename /path/to/file [extension]
    #   returns
    #       $new_safe_name      - new file name WITH path and extension
    #       $new_safe_name_only - new file name (no path / ext)
    #   eliminates duplicates by adding integers to filename as needed
    #   (e.g. file_2, file_3 ...)
    if [[ "$#" > 1 ]]; then
        safe_name="$1"
        safe_path="$2"
        [[ -z "$3" ]] && safe_ext='' || safe_ext=".$3"
        new_safe_name="${safe_path}/${safe_name}${safe_ext}"
        declare -i i=2
        while [ -f "$new_safe_name" ]; do
            new_safe_name="${safe_path}/${safe_name}_${i}${safe_ext}"
            i=$((i + 1))
        done
        new_safe_name_only="${safe_name}_${i}"
    else
        exit_usage "Invalid parameters ..." "usage: ${MAIN}get_safe_new_filename ${WHITE}filename /path/to/file [extension]"
    fi
    }
#* ######################## file manipulation functions
source_file() {
    db_echo "Script source: ($BASH_SOURCE)"
    if [[ -s "$1" ]]; then
        source "$1"
    elif [[ -L "$1" ]]; then
        source "$1"
    elif [[ -s "${HOME}/bin/$1" ]]; then
        source "${HOME}/bin/$1"
    elif [[ -s "$(which $1)" ]]; then
        source "$(which $1)"
    elif [[ -s "${PWD}/$1" ]]; then
        source "${PWD}/$1"
        db_echo "The source file ($1) loaded in script ($BASH_SOURCE) should include the path $PWD"
        db_echo "Script source: ($BASH_SOURCE)"
    elif [[ -s "$(which ${1}.sh)" ]]; then
        source "$(which ${1}.sh)"
        db_echo "The source file ($1) loaded in script ($BASH_SOURCE) should include the extension .sh"
        db_echo "Script source: ($BASH_SOURCE)"
    elif [[ -s "$(which ${1}.py)" ]]; then
        source "$(which ${1}.py)"
        db_echo "The source file ($1) loaded in script ($BASH_SOURCE) was not found, but was replaced with the python script (${1}.py)."
        db_echo "Script source: ($BASH_SOURCE)"
    else
        db_echo "The source file ($1) listed in script ($BASH_SOURCE) could not be found. A search was made for items in the path, ${1}.sh, and ${1}.py without results."
        db_echo "Script source: ($BASH_SOURCE)"
    fi
    }
hex_dump() { [[ -r "$1" ]] && od -A x -t x1z -v "$1"; }
url_encode() {
    [[ -z "$1" ]] && return 64
    encoded=$(php -r "echo rawurlencode('$1');") && return 0 || return "$EX_DATAERR"
    }
url_decode() {
    [[ -z "$1" ]] && return 1
    decoded=$(php -r "echo rawurldecode('$1');") && return 0 || return "$EX_DATAERR"
    }
#* ######################## paramter handling
parse_options() {
    # parse basic options [help|test|usage|version] & SET_DEBUG
    # TODO the 'exits' and lack of shifts make this function inadequate
    # TODO use standard functions in a wrapper instead
    case "$1" in
    -h | --help | help)
        set_man_page
        echo "$MAN_PAGE"
        return
        # exit 0
        ;;
    -t | --test | test)
        [[ ! "$SET_DEBUG" == '1' ]] && _run_tests "$@"
        return
        # exit 0
        ;;
    -u | --usage | usage)
        me "$USAGE"
        return
        # exit 0
        ;;
    -v | --version | version)
        ce "${MAIN}${NAME}${WHITE} (version ${VERSION})${RESET}"
        return
        # exit 0
        ;;
        # *) ;;
    esac
    }
#* ######################## error handling
_set_traps() {
    cur_opts="$-"
    debug_opts="axET"
    set "-${cur_opts}${debug_opts}"
    }
_trap_exit() {
    set "-${cur_opts}"
    exec 4>&- 5>&- 6>&-
    if [[ "$LOG" == '1' ]]; then
        LOG='0'
        exec 1>&4 2>&5
        exec 4>&- 5>&-
        attn "logging off ..."
    fi
    }
_trap_error() {
    me "ERR: $ERR"
    set "-${cur_opts}"
    return
    }
_trap_debug() {
    return 0
    # ce "Script source:$MAIN $BASH_SOURCE$RESET $@ \n"
    # attn "echo VARIABLE ($VARIABLE) is being used here."
    }
#* ######################## script tests
_run_tests() {
    _run_debug_config() {
        green "\$dotfiles_path is set to $dotfiles_path."
        green "\$here is set to as $here."
        }
    _bt_color_sample_test() {
        echo -e "${MAIN}C ${WARN}O ${COOL}L ${GO}O ${CHERRY}R   ${CANARY}T ${ATTN}E ${PURPLE}S ${RESET}T"
        echo -e "${MAIN}MAIN   ${WARN}WARN   ${COOL}COOL   ${GO}GO   ${CHERRY}CHERRY   ${CANARY}CANARY   ${ATTN}ATTN   ${RAIN}RAIN   ${RESET}RESET"
        }
    _test_standard_script_modules() {
        _EXIT_USAGE_TEXT="${MAIN}${script_name}${WHITE} - macOS script"
        # log file for test sesssion
        LOG_FILE_NAME="${script_source}ssm_debug_test.log"
        # functions that include an 'exit' will skip it so tests can continue
        DONT_DIE='1'
        # log everything to LOG_FILE_NAME
        log_toggle

        ce "${COOL}BASH_SOURCE:$MAIN $BASH_SOURCE$RESET"
        log_flag

        test_var "$script_name"
        test_var "$script_source"
        test_var "$SET_DEBUG"
        test_var "$DONT_DIE"
        test_var "$LOG"
        test_var "$LOG_FILE_NAME"

        # TODO add tests for these functions as needed
        test_echo "die() test" "die 'die test!'"
        test_echo "db_echo() test" "db_echo 'This is the test argument'"
        test_echo "urlencode() test" "url_encode 'http://www.github.com/skeptycal'"
        db_echo "$encoded"
        test_echo "urlencode() test" "url_decode 'http%3A%2F%2Fwww.github.com%2Fskeptycal'"
        db_echo "$decoded"
        fake_filename="$LOG_FILE_NAME"
        test_var "$fake_filename"
        test_echo "real_name() test" "real_name $fake_filename"

        log_flag
        result="${fake_filename##*/}"
        test_var "$result"

        # cleanup test environment
        log_toggle
        unset DONT_DIE
        unset LOG_FILE_NAME
        unset _EXIT_USAGE_TEXT
        unset LOG
        }
    ce "Script source:$MAIN $BASH_SOURCE$RESET"
    _run_debug_config
    _bt_color_sample_test
    _test_standard_script_modules
    return 0
    }
export_list() {
    export -p | xargs
}
#? ######################## old basic_text_colors.sh contents
    # TODO automate creation of TOC
    # FUNCTIONS         PARAMETERS and OPTIONS
    # color constants   - ANSI constants for common colors
    #                       MAIN, WARN, COOL, BLUE, GO, CHERRY, CANARY, ATTN,
    #                       PURPLE, RAIN, WHITE, RESTORE, RESET
    # color functions   - functions for printing lines in common colors
    #                       me (for main), warn, blue, green, cherry, canary,
    #                       attn, purple, rain, white
    # error messages    - C++ style error messages
    # br                - print blank line (CLI \n)
    # ce                - $@ (color echo - generic color as $1, etc.)
    # set_man_page      - set $MAN_PAGE based on docblock variables
    # parse_options     - parse basic options [test|usage|version|help] & SET_DEBUG

#? ######################## References:
    # (Side note about the colors: The colors are preceded by an escape
    #       sequence \e and defined by a color value, composed of [style;color+m]
    #       and wrapped in an escaped [] sequence. eg.
    # reference: https://stackoverflow.com/questions/1550288/os-x-terminal-colors
    # && # export -p command -- show all the exported variables.
    # reference: https://www.thegeekstuff.com/2010/08/bash-shell-builtin-commands/

#? ######################## Resources found in ssm_resources
    # _debug_function_header, in_list
    #* ######################## C++ style error messages
    # EX_OK, EX_USAGE, EX_DATAERR, EX_NOINPUT, EX_NOUSER, EX_NOHOST, EX_UNAVAILABL, EX_SOFTWARE, EX_OSERR, EX_OSFILE, EX_CANTCREAT, EX_IOERR, EX_TEMPFAIL, EX_PROTOCOL, EX_NOPERM, EX_CONFIG
    #* ######################## BASH trap signals
    # TRAP_SIGHUP, TRAP_SIGINT, TRAP_SIGQUIT, TRAP_SIGILL, TRAP_SIGTRAP, TRAP_SIGABRT, TRAP_SIGEMT, TRAP_SIGFPE, TRAP_SIGKILL, TRAP_SIGBUS, TRAP_SIGSEGV, TRAP_SIGSYS, TRAP_SIGPIPE, TRAP_SIGALRM, TRAP_SIGTERM, TRAP_SIGURG, TRAP_SIGSTOP, TRAP_SIGTSTP, TRAP_SIGCONT, TRAP_SIGCHLD, TRAP_SIGTTIN, TRAP_SIGTTOU, TRAP_SIGIO, TRAP_SIGXCPU, TRAP_SIGXFSZ, TRAP_SIGVTALRM, TRAP_SIGPROF, TRAP_SIGWINCH, TRAP_SIGINFO, TRAP_SIGUSR1, TRAP_SIGUSR2
    #* ######################## ANSI constants for common colors
    # br, ce, me, warn, blue, green, cherry, canary, attn, purple, rain, white
    # MAIN, WARN, COOL, BLUE, GO, CHERRY, CANARY, ATTN, PURPLE, RAIN, WHITE, RESTORE, RESET_FG
    #* ######################## program configuration
    # set_man_page, get_linux_platform_name, get_current_os_name
    #* ######################## program control flow functions
    # async_run, db_echo, die, yes_no, no_yes, exit_usage, print_usage, db_script_source
    #* ######################## file manipulation functions
    # source_file, hex_dump, url_encode, url_decode
    #* ######################## path manipulation functions
    # real_name, parse_filename, get_safe_new_filename

_main_loop() {
    parse_options "$@"
    [[ $SET_DEBUG == 1 ]] && _run_tests "$@"
}

[[ $ZSH_EVAL_CONTEXT =~ :file$ ]] || _main_loop "$@"
# _main_loop "$@"
